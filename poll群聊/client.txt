#include <sys/socket.h>
#include<string.h>
#include<unistd.h>
#include<stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include<stdio.h>
#include<sys/types.h>
#include<poll.h>
#include<fcntl.h>

#define BUFFER_SIZE 1024

void use(char *argv)
{
    printf("%s [ip_server] [port_srvera]\n", argv);
}
int main(int argc, char *argv[])
{
    if(argc<3)
    {
        use(argv[0]);
        return 1;
    }
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if(sock<0){
       perror("socket");
       return 2;
    }      
    struct sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_port =htons(atoi( argv[2]));
    server.sin_addr.s_addr = inet_addr((argv[1]));
    int conn = connect(sock, (struct sockaddr*)&server, sizeof(server));
    if(conn<0){
        perror("connect");
        close(sock);
        return 3;
    }
    send(sock, argv[3], sizeof(argv[3]), 0);
    pollfd fds[2];
    fds[0].fd = 0;
    fds[0].events = POLLIN;
    fds[0].revents =0;
    fds[1].fd = sock;
    fds[1].events = POLLIN|POLLRDHUP;
    fds[1].revents = 0;
    char read[BUFFER_SIZE]; 
    int pipefd[2];
    int p = pipe(pipefd);
    if(p < -1){
        perror("pipe");
        return 4;
    }

    while(1)
    {
        int ret = poll(fds, 2, -1);
        if(ret < 0){
            printf("poll faild\n");
            break;
        }
        if(fds[1].revents & POLLRDHUP){
            printf("server quit\n");
            break;
        }else if(fds[1].revents & POLLIN){
            memset(read, '\0', BUFFER_SIZE);
            int ret = recv(fds[1].fd, read, BUFFER_SIZE-1,0);
            char n = read[ret-1];
            read[ret-1] = '\0';
            printf("[%c]user echo#%s\n",n, read);
        }
        if(fds[0].revents & POLLIN){
            ret = splice(0 , NULL, pipefd[1], NULL, 32768, SPLICE_F_MORE|SPLICE_F_MOVE);
            ret = splice(pipefd[0] , NULL, fds[1].fd, NULL, 32768, SPLICE_F_MORE|SPLICE_F_MOVE);
        }
    }
    close(sock);
    printf("client goodbye!!!\n");
    return 0;
}
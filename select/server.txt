#include<stdio.h>
#include<sys/select.h>
#include<unistd.h>
#include<time.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<string.h>
#include<arpa/inet.h>
#include<netinet/in.h>
#include<stdlib.h>

int GetSock(char* ip, int port)
{

    int sock = socket(AF_INET, SOCK_STREAM,0);
    if(sock<0){
        perror("socket");
        exit(1);
    }
    struct sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_port = htons(port);
    server.sin_addr.s_addr = inet_addr(ip); 
    socklen_t len = sizeof(server);
    if(bind(sock, (struct sockaddr*)&server,len)<0){
        perror("bind");
        exit(2);
    }

    if(listen(sock, 10)<0){
        perror("listen");
        exit(3);
    }
    return sock;
}

int fds[1024];

int main(int argc, char* argv[])
{
    if(argc<3){
        printf("USE: %s [server_ip] [server_port]\n",argv[0]);
        return 1;
    }
    int listen_sock = GetSock(argv[1],atoi(argv[2]));
    printf("get listen_sock\n");   
    int num = 1024;  //文件描述符集的最大容量
    int i = 0;
    for(i = 0; i< num; i++){
        fds[i] = -1;
    }
    fd_set rfds;
    while(1){
        printf("while..........\n");
        FD_ZERO(&rfds);
        fds[0] = listen_sock;
        int max = -1;
        for(i = 0; i< num; i++){
            if(fds[i] != -1){
                FD_SET(fds[i], &rfds);
            }         
            if(max < fds[i]){
                max = fds[i];
            }
        }
        struct timeval timeout = {3,0};
        switch(select(max+1,  &rfds, NULL, NULL,&timeout))
        {
            case 0:
                printf("Time out...\n");
                break;
            case -1:
                perror("select");       
                exit(1);
                break;
            default:
            {
                printf("defaule\n");
                for(i=0; i< num;i++){
                    if(fds[i] == -1)
                    {
                        continue;
                    }
                    printf("aaaaaaaaaaaaaaaaaa%d\n", i);
                    
                    if(FD_ISSET(fds[i], &rfds)&&fds[i] == listen_sock){
                        printf("bbbbbbbbbbbbbbb\n");
                        struct sockaddr_in* client;
                        socklen_t len = sizeof(client);
                        int newsock = accept(listen_sock, (struct sockaddr*)&client, &len);
                        if(newsock != -1){
                        printf("get newsocket:%d\n",newsock);
                        int j = 0;
                        for(j = 0; j< num; j++){
                            if(fds[j] == -1){
                                fds[j] = newsock; 
                                break;
                        }
                        if(j == num){
                            printf("fd_set is full\n");
                            close(newsock);
                        }                 
                        }       
                    }
                    if(i!=0&&FD_ISSET(fds[i], &rfds)){
                        printf("read\n");
                        char buf[1024];
                        ssize_t s = read(fds[i], buf , sizeof(buf)-1);
                        if(s>0){
                            buf[s] = '\0';
                            printf("client say#%s\n",buf);
                        }else if(s == 0){
                            printf("cllient is quit\n");
                            close(fds[i]);
                            fds[i] = -1;
                        }else{
                             perror("read");
                             close(fds[i]);
                              fds[i] = -1;
                        }
                    }
                    else{
                        printf("123456\n");
                        continue;
                    }     
                }
            }
                break;
            }         
        }  
    }
}

#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<string.h>
#include<sys/epoll.h>
#include<stdlib.h>
#include<arpa/inet.h>
#include<netinet/in.h>

#define SIZE 64

int Getlistensock(char* ip, int port)
{
    int sock = socket(AF_INET, SOCK_STREAM,0);
    if(sock<0){
        perror("socket");
        exit(2);
    }
    struct sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(ip);
    server.sin_port = htons(port);
    if(bind(sock, (struct sockaddr*)&server,sizeof(server))<0){
        perror("bind");
        close(sock);
        exit(3);
    }
    if(listen(sock, 10)<0){
         perror("listen");
         close(sock);
         exit(4);
    }
    return sock;
}

int main(int argc, char* argv[])
{
    if(argc<3){
        printf("Usage:\n\t[%s] [server_ip] [server_port]\n",argv[0]);
        return 1;
    }

    int listen_sock = Getlistensock(argv[1],atoi(argv[2]));
    
    //create rbtree
    int epfd =  epoll_create(SIZE);

    struct epoll_event ev;
    ev.events = EPOLLIN;
    ev.data.fd = listen_sock;

    struct epoll_event revent[20];
    int num = 0;
    int timeout = -1;
    int rev_len = sizeof(revent)/sizeof(revent[0]);
    if(epoll_ctl(epfd, EPOLL_CTL_ADD, listen_sock, &ev)){
        perror("epoll_ctl");
        return 5;
    }
 
    while(1){
        num = epoll_wait(epfd, revent,rev_len,timeout);
        switch(num)
        {
            case 0:
                printf("timeout...\n");
                break;
            case -1:
                perror("epol_wait");
                break;
            default:
            { 
                 int i = 0;
                 for(i = 0;i<num;i++){
                     int fd = revent[i].data.fd;
                     if(fd == listen_sock){
                         struct sockaddr_in client;
                         int len = sizeof(client);
                         int new_sock = accept(listen_sock,(struct sockaddr*)&client, &len);
                         if(new_sock<0){
                             perror("accept");
                             break;
                         }else{
                             printf("get a client\n");
                             ev.data.fd = new_sock;
                             ev.events = EPOLLIN;
                             epoll_ctl(epfd, EPOLL_CTL_ADD, new_sock,&ev);
                         }
                     }
                     if(fd != listen_sock){ 
                         char buf[1024];
                         if(revent[i].events&EPOLLIN){
                             ssize_t s = read(fd, buf, sizeof(buf)-1);
                             if(s > 0){
                                 buf[s] = 0;
                                 printf("client say#%s\n",buf);
                             }else if(s == 0){
                                 printf("client is close\n");
                                 close(fd);
                                 epoll_ctl(epfd, EPOLL_CTL_DEL, fd,&ev);
                             }else{
                                 perror("read");
                                 close(fd);
                                 epoll_ctl(epfd, EPOLL_CTL_DEL, fd,&ev);    
                             }
                         }
                         ev.data.fd = fd;
                         ev.events = revent[i].events | EPOLLOUT;
                         epoll_ctl(epfd, EPOLL_CTL_MOD,fd,&ev);
                         if(revent[i].events&EPOLLOUT){
                             char *str = "HTTP/1.0 200 OK\r\n\r\n<html><h1>÷÷—≈»„<html><h1>\n";
                             write(fd, str, strlen(str));
                             close(fd);
                             epoll_ctl(epfd,EPOLL_CTL_DEL, fd,&ev);
                         }
                     }
                     
                 }//for
            }
            break;
              
        }//switch
    }//while 
    return 0;
}

#include<stdio.h>
#include <sys/types.h>          /* See NOTES */
#include <sys/socket.h>
#include<string.h>
#include<unistd.h>
#include<stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#define _BACKLOG_ 10

int GetSocket(int port)
{
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if(sock<0){
        perror("socket");
        exit(1);
    }
    printf("%d:socket create is ok\n", sock);
    struct sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_port = htons(port);
    server.sin_addr.s_addr = htonl(INADDR_ANY);
    if(bind(sock, (struct sockaddr*)&server,sizeof(server))<0){
        perror("bind");
        close(sock);
        exit(2);
    }
    printf("bind is ok\n");
    if(listen(sock, _BACKLOG_)< 0){
        perror("listen");
        close(sock);
        return 3;
    }
    printf("listen is ok\n");
    return sock;
}


void use(char *a)
{
    printf("#%s [port_server]\n", a);
}
int main(int argc, char *argv[])
{
    printf("main start\n");
    if(argc<2)
    {
       use(argv[0]);
       return 6;
    }
    printf("use is ok\n");
    int listen_sock = GetSocket(atoi(argv[1])); 
    
    printf("GetSocket is ok\n");
    struct sockaddr_in client;
    socklen_t len = 0;
    while(1)
    {
        printf("wait accept....\n");
        int new_sock = accept(listen_sock,(struct sockaddr*)&client, &len);
        if(new_sock< 0)
        {
            perror("accept");
            close(new_sock);
            return 4;
        }
        printf("accept is ok\n");
        while(1)
        {   
            printf("client say#");
            fflush(stdout);
            char buf[1024];
            ssize_t i = read(new_sock, buf, sizeof(buf));
            if(i>0){
                printf("%s\n", buf);
            }else if(i == 0){
                close(new_sock);
                printf("client goodbye!!!\n");
                break; 
            }else{
                perror("read");
                break;
            }
            printf("please enter#");
            fflush(stdout);
            fgets(buf, sizeof(buf), stdin);
            buf[strlen(buf)-1] = '\0';
            write(new_sock, buf, sizeof(buf));
        }
    }
    close(listen_sock);
    return 0;
}


